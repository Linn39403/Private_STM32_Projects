/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "com.h"
#include "jumper.h"
#include "stm32l0xx_nucleo.h"
#include <stdio.h>
#include "ringbuffer.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* Bootloader Commands */
#define CMD_GET               0x00
#define CMD_GET_VER           0x01
#define CMD_GET_ID            0x02
#define CMD_READ_MEM          0x11
#define CMD_GO                0x21
#define CMD_WRITE_MEM         0x31
#define CMD_ERASE             0x43
#define CMD_EXT_ERASE         0x44
#define CMD_WRITE_PROTECT     0x63
#define CMD_WRITE_UNPROTECT   0x73
#define CMD_READOUT_PROTECT   0x82
#define CMD_READOUT_UNPROTECT 0x92

#define BOOTLOADER_ACK  0x79
#define BOOTLOADER_NACK  0x1F

const uint8_t REPLY_GET_ID_CMD[] = {BOOTLOADER_ACK, 0x01, 0x04, 0x47, BOOTLOADER_ACK};
const uint8_t REPLY_GET_CMD[] = {BOOTLOADER_ACK, 0x0B, CMD_WRITE_MEM, CMD_GET, CMD_GET_VER, CMD_GET_ID,
                                 CMD_READ_MEM, CMD_GO, CMD_WRITE_MEM, CMD_EXT_ERASE, CMD_WRITE_PROTECT,
                                 CMD_WRITE_UNPROTECT, CMD_READOUT_PROTECT, CMD_READOUT_UNPROTECT, BOOTLOADER_ACK
                                };

#define FLASH_USER_START_ADDR   (FLASH_BASE + FLASH_PAGE_SIZE * 256)             /* Start @ of user Flash area */
#define FLASH_USER_END_ADDR     (FLASH_USER_START_ADDR + FLASH_PAGE_SIZE * 10)   /* End @ of user Flash area */
FLASH_EraseInitTypeDef EraseInitStruct;
uint32_t PAGEError = 0;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;
extern UART_HandleTypeDef   UartHandle;
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
void WaitAndReadRingBuffer(uint8_t * ptr, uint16_t len);
uint8_t CalculateCheckSum(const uint8_t * input,uint16_t len);
void ReadMemoryCmd(void);
void EraseMemoryCmd(void);
void WriteMemoryCmd(void);
HAL_StatusTypeDef PageErase(uint16_t PageNo,uint16_t NoOfPages);
/* USER CODE BEGIN PFP */
#define UART_REPLY_ACK()  {\
                           uint8_t sendThis = BOOTLOADER_ACK; \
                           HAL_UART_Transmit(&UartHandle, (uint8_t*)&sendThis, 1, 100);\
                          }
#define UART_REPLY_NACK() {\
                           uint8_t sendThis = BOOTLOADER_NACK; \
                           HAL_UART_Transmit(&UartHandle, (uint8_t*)&sendThis, 1, 100);\
                          }
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
RingBuffer UART2RingBuffer;
Button_TypeDef BlueButton;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */


    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();

    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();

    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    //MX_USART2_UART_Init();
    /* USER CODE BEGIN 2 */

    COM_Init();
    BSP_PB_Init(BlueButton,BUTTON_MODE_GPIO);
    RingBuffer_Init(&UART2RingBuffer);

    if ( BSP_PB_GetState(BlueButton) == 1 ) //Not Pressed
    {
        jump_to_application();
    }
    else
    {
        /* USER CODE END 2 */
        /* Infinite loop */
        /* USER CODE BEGIN WHILE */
        while (1)
        {
            uint8_t cmd[16]="";
            /* USER CODE END WHILE */
            while(RingBuffer_GetDataLength(&UART2RingBuffer) > 0 )
            {
                /* Read the first command byte*/
                RingBuffer_Read(&UART2RingBuffer, &cmd[0], 1);
                /* Read the command complement byte */
                WaitAndReadRingBuffer(&cmd[1], 1);
                if( cmd[0] == ( cmd[1] ^ 0xFF ) ) // OK ?
                {
                    switch(cmd[0])
                    {
                        case 0x7F:
                            UART_REPLY_ACK();
                            break;

                        //0x00, 0xFF
                        case CMD_GET:
                            HAL_UART_Transmit(&UartHandle, (uint8_t*)&REPLY_GET_CMD[0], sizeof(REPLY_GET_CMD), 100);
                            break;
                        //0x02, 0xFD
                        case CMD_GET_ID:
                            HAL_UART_Transmit(&UartHandle, (uint8_t*)&REPLY_GET_ID_CMD[0], sizeof(REPLY_GET_ID_CMD), 100);
                            break;

                        //0x11, 0xEE
                        case CMD_READ_MEM:
                            UART_REPLY_ACK();
                            ReadMemoryCmd();
                            break;

                        //0x44, 0xBB
                        case CMD_EXT_ERASE:
                            //Check RDP is active or not?
                            //if RDP is active -> No Ack , otherwise Ack
                            UART_REPLY_ACK();
                            EraseMemoryCmd();
                            break;

                        //0x31, 0xCE
                        case CMD_WRITE_MEM:
                            UART_REPLY_ACK();
                            WriteMemoryCmd();
                            break;

                        default:
                            UART_REPLY_NACK();
                            break;
                    }//end Switch
                }
                else //Command Fail
                {
                    UART_REPLY_NACK();
                }
            }//while(RingBuffer_GetDataLength(&UART2RingBuffer) > 0 )
            HAL_Delay(50);
            /* USER CODE BEGIN 3 */
        }//while 1
    }//else
    /* USER CODE END 3 */
}

void WriteMemoryCmd(void)
{
    uint8_t AddressBytes[4] = "";
    uint32_t Address = 0;
    uint16_t DataLength = 0;
    uint8_t CheckSum;
    uint8_t CalculatedCheckSum = 0;
    uint8_t FlashDataBytes[256] = "";
    uint32_t FlashData = 0;
    HAL_StatusTypeDef HAL_Status;
    uint32_t retryCnt = 2;
    /*
    Bytes 3 to 6 Start address byte 3: MSB, byte 6: LSB
    Byte 7: Checksum: XOR (byte 3, byte 4, byte 5, byte 6
    */
    while(RingBuffer_GetDataLength(&UART2RingBuffer) < 5 )
        continue;

    RingBuffer_Read(&UART2RingBuffer, AddressBytes, 4 );
    RingBuffer_Read(&UART2RingBuffer, &CheckSum, 1);
    /* Compare the Calculated CheckSum with Byte 7 */
    if( CheckSum == CalculateCheckSum(AddressBytes,4) )
    {
        //Convert 4 Bytes of Address values into 32bit.
        Address = (uint32_t)(AddressBytes[0] << 24 | AddressBytes[1] << 16 | AddressBytes[2] << 8 | AddressBytes[3]);
        UART_REPLY_ACK();//Dummy
    }

    /* get the len of incoming flash data */
    WaitAndReadRingBuffer((uint8_t*)&DataLength, 1);
    DataLength += 1;

    //wait the incoming bytes
    WaitAndReadRingBuffer(FlashDataBytes, DataLength);
    //DataLenght Xor Data[0] Xor Data[1] .... Data[N]
    CalculatedCheckSum = CalculateCheckSum(FlashDataBytes, DataLength );
    CalculatedCheckSum ^= (DataLength - 1) ;
    CheckSum = 0;
    //wait for the checksum
    WaitAndReadRingBuffer(&CheckSum, 1);
    if( CalculatedCheckSum == CheckSum )
    {
        HAL_FLASH_Unlock();


        __HAL_FLASH_GET_FLAG(( FLASH_FLAG_BSY         |
                               FLASH_FLAG_EOP         |
                               FLASH_FLAG_ENDHV       |
                               FLASH_FLAG_READY       |
                               FLASH_FLAG_PGAERR      |
                               FLASH_FLAG_SIZERR      |
                               FLASH_FLAG_OPTVERR     |
                               FLASH_FLAG_RDERR       |
                               FLASH_FLAG_WRPERR      |
                               FLASH_FLAG_FWWERR      |
                               FLASH_FLAG_NOTZEROERR  ));
        /* Write the Flash Memory in Here */
        for(int i = 0; i < DataLength -1; i+= 4)
        {
            FlashData = (uint32_t)(FlashDataBytes[i+3] << 24 | FlashDataBytes[i+2] << 16 | FlashDataBytes[i+1] << 8 | FlashDataBytes[i]);
            retryCnt = 2;
            do
            {
                HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address+i, FlashData);
            }
            while(HAL_Status != HAL_OK && retryCnt-- > 0 );
        }
        HAL_FLASH_Lock();
        UART_REPLY_ACK();
    }
    else
    {
        UART_REPLY_NACK();
    }
}
void EraseMemoryCmd(void)
{
    //PageNo , Pages ... , CheckSum ( 2 Bytes )
    uint8_t NoOfPagesArray[2] = "";
    uint16_t NoOfPages = 0;
    uint8_t PagesArray[256] = "";
    uint8_t CalculatedCheckSum = 0;
    uint8_t InComingCheckSum = 0;
    /*Byte 0 and 1 are the total number of pages*/
    while(RingBuffer_GetDataLength(&UART2RingBuffer) < 2 )
        continue;
    RingBuffer_Read(&UART2RingBuffer, NoOfPagesArray, 2 );

    //if No of pages is 0xFFFF == Mass Erase, 0xFFFE = Bank1 Erase, 0xFFFD = Bank2 Erase
    if( NoOfPagesArray[1] == 0xFF )
    {
        /* Wait for the incoming CheckSum */
        while(RingBuffer_GetDataLength(&UART2RingBuffer) < 1 )
            continue;
        /* Read the CheckSum from the Ring Buffer */
        RingBuffer_Read(&UART2RingBuffer, &InComingCheckSum, 1 ); //1 or 2?

        switch(NoOfPagesArray[0])
        {
            case 0xFF: //Mass Erase
                break;

            case 0xFE: //Bank1 Erase
                break;

            case 0xFD: //Bank2 Erase
                break;

            default:
                UART_REPLY_NACK();
                break;
        }
    }
    else
    {
        /* NoOfPages is 2 times than NoOfPagesArray*/
        NoOfPages = (( (uint16_t)NoOfPagesArray[0] << 8 | NoOfPagesArray[1] ) << 1 ) ;
        NoOfPages = NoOfPages == 0 ? NoOfPages : NoOfPages + 2;

        /* Wait for the incoming pages, Pages + 1 */
        while(RingBuffer_GetDataLength(&UART2RingBuffer) < NoOfPages )
            continue;
        /* Read the Pages from the Ring Buffer */
        RingBuffer_Read(&UART2RingBuffer, PagesArray, NoOfPages );

        /* Wait for the incoming CheckSum */
        while(RingBuffer_GetDataLength(&UART2RingBuffer) < 1 )
            continue;
        /* Read the CheckSum from the Ring Buffer */
        RingBuffer_Read(&UART2RingBuffer, &InComingCheckSum, 1 ); //1 or 2?

        CalculatedCheckSum = CalculateCheckSum(&PagesArray[2], NoOfPages - 3);
        if( InComingCheckSum == CalculatedCheckSum )
        {
            uint16_t PageNo = (uint16_t)PagesArray[2] << 8 | PagesArray[3];
            uint16_t TotalPages = (uint16_t)NoOfPagesArray[0] << 8 | NoOfPagesArray[1];
            PageErase(PageNo,TotalPages);
            UART_REPLY_ACK();
        }
        else
        {
            UART_REPLY_NACK();
        }
    }
}

HAL_StatusTypeDef PageErase(uint16_t PageNo,uint16_t NoOfPages)
{
    HAL_StatusTypeDef HAL_Status;
    char retryCnt = 2;
    /* Fill EraseInit structure*/
    EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
    EraseInitStruct.PageAddress = FLASH_USER_START_ADDR + FLASH_PAGE_SIZE * PageNo ;
    EraseInitStruct.NbPages     = NoOfPages;

    HAL_FLASH_Unlock();
        __HAL_FLASH_GET_FLAG(( FLASH_FLAG_BSY         |
                               FLASH_FLAG_EOP         |
                               FLASH_FLAG_ENDHV       |
                               FLASH_FLAG_READY       |
                               FLASH_FLAG_PGAERR      |
                               FLASH_FLAG_SIZERR      |
                               FLASH_FLAG_OPTVERR     |
                               FLASH_FLAG_RDERR       |
                               FLASH_FLAG_WRPERR      |
                               FLASH_FLAG_FWWERR      |
                               FLASH_FLAG_NOTZEROERR  ));    
    do
    {
        HAL_Status =  HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
    }
    while(HAL_Status != HAL_OK && retryCnt-- > 0 );

    HAL_FLASH_Lock();

    return HAL_Status;
}

void ReadMemoryCmd(void)
{
    //Bug When the Byte Count is FFF, it's hang <-----------------------------------------------------------------------
    uint8_t AddressBytes[4] = "";
    uint32_t Address = 0;
    uint8_t BytesCount[2] = "";
    uint8_t CheckSum;
    uint8_t ReplyBytes[8] = "";
    uint32_t *AddressPtr ;
    /*
    Bytes 3 to 6 Start address byte 3: MSB, byte 6: LSB
    Byte 7: Checksum: XOR (byte 3, byte 4, byte 5, byte 6
    */
    while(RingBuffer_GetDataLength(&UART2RingBuffer) < 5 )
        continue;

    RingBuffer_Read(&UART2RingBuffer, AddressBytes, 4 );
    RingBuffer_Read(&UART2RingBuffer, &CheckSum, 1);
    /* Compare the Calculated CheckSum with Byte 7 */
    if( CheckSum == CalculateCheckSum(AddressBytes,4) )
    {
        UART_REPLY_ACK();//Dummy
    }

    /* Wait for how many bytes */

    while(RingBuffer_GetDataLength(&UART2RingBuffer) < 2 ) //2 Bytes??? Not one Byte? <---------------------------------
        continue;
    RingBuffer_Read(&UART2RingBuffer, BytesCount, 2 );

    /* Reply Ack */
    UART_REPLY_ACK();
    /* Read the incoming addresses and convert it to pointer. */
    Address = (uint32_t)(AddressBytes[0] << 24 | AddressBytes[1] << 16 | AddressBytes[2] << 8 | AddressBytes[3]);
    AddressPtr = (uint32_t*)Address;

    if( BytesCount[0] == 0x00 && BytesCount[1] == 0xFF )
    {
        /* Read One Byte Only */
        ReplyBytes[0] = *AddressPtr >> 24;
        HAL_UART_Transmit(&UartHandle, (uint8_t*)&ReplyBytes[0], 1, 100);
    }
    else
    {
        //******************* Need To check Read Protection Bit in Here. **********************
        for(int i = 0; i < (BytesCount[0] + 1 ) >> 2; i++)   //4Bytes per message
        {
            ReplyBytes[3] = *AddressPtr >> 24;
            ReplyBytes[2] = *AddressPtr >> 16;
            ReplyBytes[1] = *AddressPtr >> 8;
            ReplyBytes[0] = *AddressPtr >> 0;
            HAL_UART_Transmit(&UartHandle, (uint8_t*)&ReplyBytes[0], 4, 100);
            AddressPtr ++;
        }
    }
}

uint8_t CalculateCheckSum(const uint8_t * input,uint16_t len)
{
    uint8_t CheckSum = 0;
    for(int i = 0; i < len; i++)
    {
        CheckSum ^= input[i];
    }
    return CheckSum;
}

void WaitAndReadRingBuffer(uint8_t * ptr, uint16_t len)
{
    while( RingBuffer_GetDataLength(&UART2RingBuffer) < len )
        ;
    RingBuffer_Read(&UART2RingBuffer, ptr, len); //Read the command complement byte
}
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

    /** Configure the main internal regulator output voltage
    */
    //HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
    RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                  |RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
    {
        Error_Handler();
    }
    /** Initializes the peripherals clocks
    */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
    {
        Error_Handler();
    }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{

    /* USER CODE BEGIN USART2_Init 0 */

    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
    if (HAL_UART_Init(&huart2) != HAL_OK)
    {
        Error_Handler();
    }
    /*
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
    {
      Error_Handler();
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
    {
      Error_Handler();
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
    {
      Error_Handler();
    }*/
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);

    /*Configure GPIO pin : LED4_Pin */
    GPIO_InitStruct.Pin = LED2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
       tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
